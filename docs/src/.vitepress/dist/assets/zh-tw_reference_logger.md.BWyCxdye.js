import{_ as d,c as l,l as e,a,I as r,a3 as t,o as i,D as c}from"./chunks/framework.yq_lTSw2.js";const E=JSON.parse('{"title":"Logger","description":"","frontmatter":{},"headers":[],"relativePath":"zh-tw/reference/logger.md","filePath":"zh-tw/reference/logger.md"}'),n={name:"zh-tw/reference/logger.md"},s=t('<h1 id="logger" tabindex="-1">Logger <a class="header-anchor" href="#logger" aria-label="Permalink to &quot;Logger&quot;">​</a></h1><div class="info custom-block github-alert"><p class="custom-block-title">INFO</p><p>用于输出日志，继承了<code>AbstractLogger</code></p></div><h2 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h2><p><code>Logger</code>具有以下方法</p>',4),p={id:"registerloglistener-listener-this",tabindex:"-1"},h=e("code",null,"registerLogListener(listener): this",-1),g=e("a",{class:"header-anchor",href:"#registerloglistener-listener-this","aria-label":'Permalink to "`registerLogListener(listener): this` <Badge type="tip" text="1.3.0-rc.1 +" />"'},"​",-1),m=e("ul",null,[e("li",null,[e("code",null,"listener"),a(" (level: Level, content: string) => void")])],-1),u=e("p",null,"注册一个监听器，当有日志被记录时调用，支持链式调用",-1),f={id:"gethistoryofappender-predicates",tabindex:"-1"},_=e("code",null,"getHistoryOfAppender(predicates)",-1),b=e("a",{class:"header-anchor",href:"#gethistoryofappender-predicates","aria-label":'Permalink to "`getHistoryOfAppender(predicates)` <Badge type="tip" text="1.1.0 +" />"'},"​",-1),v=e("ul",null,[e("li",null,[e("code",null,"predicates"),a(" string | AppenderTypeEnum - 可以是"),e("code",null,"Appender"),a("名称或类型，返回第一个符合条件的"),e("code",null,"Appender")])],-1),A=e("p",null,"获取本次应用启动至被调用时期间生成的日志",-1),k={id:"getallhistoryofappender-predicates",tabindex:"-1"},y=e("code",null,"getAllHistoryOfAppender(predicates)",-1),q=e("a",{class:"header-anchor",href:"#getallhistoryofappender-predicates","aria-label":'Permalink to "`getAllHistoryOfAppender(predicates)` <Badge type="tip" text="1.1.0 +" />"'},"​",-1),x=t('<ul><li><code>predicates</code> string - 用于搜索具名<code>FileAppender</code></li></ul><p>获取包括缓存在内的所有日志内容</p><h2 id="setlevel-level-this" tabindex="-1"><code>setLevel(level): this</code> <a class="header-anchor" href="#setlevel-level-this" aria-label="Permalink to &quot;`setLevel(level): this`&quot;">​</a></h2><ul><li><code>level</code> Level - 要设置的日志级别</li></ul><p>设置新日志级别，该方法会返回实例本身，支持链式调用</p><h2 id="withmarker-marker-this" tabindex="-1"><code>withMarker(marker): this</code> <a class="header-anchor" href="#withmarker-marker-this" aria-label="Permalink to &quot;`withMarker(marker): this`&quot;">​</a></h2><ul><li><code>marker</code> Marker - 要添加的标签，通过<code>MarkerManager.getMarker</code>获取</li></ul><p>为下一条要写出的日志添加一个标签，该标签将随附在日志内容尾部，支持链式调用</p><h2 id="addfileappender-path-name-level-options" tabindex="-1"><code>addFileAppender(path, name, level?, options?)</code> <a class="header-anchor" href="#addfileappender-path-name-level-options" aria-label="Permalink to &quot;`addFileAppender(path, name, level?, options?)`&quot;">​</a></h2><ul><li><code>path</code> string - 要写出的文件路径</li><li><code>name</code> string - 该<code>FileAppender</code>的名称，用于作为删除索引</li><li><code>level</code> Level - 最高输出日志级别，高于该级别的日志将被忽略</li><li><code>options</code><ul><li><code>useWorker</code> boolean - 是否启用多线程</li><li><code>maxFileSize</code> number - 最大日志文件占用，以KB为单位</li><li><code>maxCacheCount</code> number - 最大日志缓存数量</li><li><code>encryptor</code> (level: Level, originalLog: string | ArrayBuffer) =&gt; string | ArrayBuffer - 加密函数</li></ul></li></ul><p>向<code>Logger</code>添加一个新的<code>FileAppender</code>，支持链式调用</p><h2 id="addconsoleappender-level-this" tabindex="-1"><code>addConsoleAppender(level?): this</code> <a class="header-anchor" href="#addconsoleappender-level-this" aria-label="Permalink to &quot;`addConsoleAppender(level?): this`&quot;">​</a></h2><ul><li><code>level</code> - 输出的最高日志等级，默认Level.ALL</li></ul><p>设置该<code>Logger</code>的日志输出级别，高于此级别的日志将被忽略，过滤优先度高于<code>Appender</code>，支持链式调用</p><h2 id="clearappender-this" tabindex="-1"><code>clearAppender(): this</code> <a class="header-anchor" href="#clearappender-this" aria-label="Permalink to &quot;`clearAppender(): this`&quot;">​</a></h2><p>删除该<code>Logger</code>所有绑定的<code>Appender</code>，支持链式调用</p><h2 id="removetypedappender-type-this" tabindex="-1"><code>removeTypedAppender(type): this</code> <a class="header-anchor" href="#removetypedappender-type-this" aria-label="Permalink to &quot;`removeTypedAppender(type): this`&quot;">​</a></h2><ul><li><code>type</code> AppenderTypeEnum - 要移除的<code>Appender</code>类型</li></ul><p>删除所有类型为<code>type</code>的<code>Appender</code>，支持链式调用</p><h2 id="removenamedappender-name-this" tabindex="-1"><code>removeNamedAppender(name): this</code> <a class="header-anchor" href="#removenamedappender-name-this" aria-label="Permalink to &quot;`removeNamedAppender(name): this`&quot;">​</a></h2><ul><li><code>name</code> string - 要移除的<code>Appender</code>名称</li></ul><p>删除名称为<code>name</code>的<code>FileAppender</code>，支持链式调用</p><h2 id="debug-format-args" tabindex="-1"><code>debug(format, ...args)</code> <a class="header-anchor" href="#debug-format-args" aria-label="Permalink to &quot;`debug(format, ...args)`&quot;">​</a></h2><ul><li><code>format</code> string - 输出格式</li><li><code>args</code> any - 输出变量</li></ul><p>输出一条<code>Level</code>为<code>DEBUG</code>的日志</p><h2 id="error-format-args" tabindex="-1"><code>error(format, ...args)</code> <a class="header-anchor" href="#error-format-args" aria-label="Permalink to &quot;`error(format, ...args)`&quot;">​</a></h2><ul><li><code>format</code> string - 输出格式</li><li><code>args</code> any - 输出变量</li></ul><p>输出一条<code>Level</code>为<code>ERROR</code>的日志</p><h2 id="info-format-args" tabindex="-1"><code>info(format, ...args)</code> <a class="header-anchor" href="#info-format-args" aria-label="Permalink to &quot;`info(format, ...args)`&quot;">​</a></h2><ul><li><code>format</code> string - 输出格式</li><li><code>args</code> any - 输出变量</li></ul><p>输出一条<code>Level</code>为<code>INFO</code>的日志</p><h2 id="fatal-format-args" tabindex="-1"><code>fatal(format, ...args)</code> <a class="header-anchor" href="#fatal-format-args" aria-label="Permalink to &quot;`fatal(format, ...args)`&quot;">​</a></h2><ul><li><code>format</code> string - 输出格式</li><li><code>args</code> any - 输出变量</li></ul><p>输出一条<code>Level</code>为<code>FATAL</code>的日志</p><h2 id="trace-format-args" tabindex="-1"><code>trace(format, ...args)</code> <a class="header-anchor" href="#trace-format-args" aria-label="Permalink to &quot;`trace(format, ...args)`&quot;">​</a></h2><ul><li><code>format</code> string - 输出格式</li><li><code>args</code> any - 输出变量</li></ul><p>输出一条<code>Level</code>为<code>TRACE</code>的日志</p><h2 id="terminate" tabindex="-1"><code>terminate()</code> <a class="header-anchor" href="#terminate" aria-label="Permalink to &quot;`terminate()`&quot;">​</a></h2><p>终止所有<code>Appender</code>，并结束该<code>Logger</code>的运行</p>',39);function L(P,T,B,N,C,F){const o=c("Badge");return i(),l("div",null,[s,e("h2",p,[h,a(),r(o,{type:"tip",text:"1.3.0-rc.1 +"}),a(),g]),m,u,e("h2",f,[_,a(),r(o,{type:"tip",text:"1.1.0 +"}),a(),b]),v,A,e("h2",k,[y,a(),r(o,{type:"tip",text:"1.1.0 +"}),a(),q]),x])}const O=d(n,[["render",L]]);export{E as __pageData,O as default};
